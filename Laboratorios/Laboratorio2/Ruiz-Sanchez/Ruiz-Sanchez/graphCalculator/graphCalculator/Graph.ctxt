#BlueJ class context
comment0.target=Graph
comment1.params=vertices\ edges
comment1.target=Graph(java.lang.String[],\ java.lang.String[][])
comment10.params=
comment10.target=java.lang.String\ toString()
comment11.params=from\ to
comment11.target=void\ addEdge(java.lang.String,\ java.lang.String)
comment11.text=\r\n\ Agrega\ un\ arco\ entre\ dos\ v\u00E9rtices.\r\n
comment12.params=from\ to
comment12.target=void\ removeEdge(java.lang.String,\ java.lang.String)
comment12.text=\r\n\ Elimina\ un\ arco\ entre\ dos\ v\u00E9rtices.\r\n
comment13.params=verticesToCheck
comment13.target=boolean\ containsAllVertices(java.lang.String[])
comment13.text=\r\n\ Verifica\ si\ un\ conjunto\ de\ v\u00E9rtices\ pertenece\ al\ grafo.\r\n
comment14.params=verticesToPass
comment14.target=java.util.List\ findPathThrough(java.lang.String[])
comment14.text=\r\n\ Encuentra\ un\ camino\ que\ pase\ por\ un\ conjunto\ de\ v\u00E9rtices.\r\n\ Retorna\ una\ lista\ con\ el\ camino\ encontrado\ o\ null\ si\ no\ existe.\r\n
comment15.params=current\ verticesToPass\ index\ path\ visited
comment15.target=boolean\ dfs(java.lang.String,\ java.lang.String[],\ int,\ java.util.List,\ java.util.Set)
comment16.params=g
comment16.target=Graph\ intersection(Graph)
comment17.params=g
comment17.target=Graph\ difference(Graph)
comment18.params=g
comment18.target=Graph\ join(Graph)
comment2.params=vertex
comment2.target=java.lang.String\ normalize(java.lang.String)
comment3.params=vertex
comment3.target=boolean\ contains(java.lang.String)
comment4.params=start\ end
comment4.target=Graph\ path(java.lang.String,\ java.lang.String)
comment5.params=g
comment5.target=Graph\ union(Graph)
comment6.params=
comment6.target=int\ vertices()
comment7.params=
comment7.target=int\ edges()
comment8.params=obj
comment8.target=boolean\ equals(java.lang.Object)
comment9.params=
comment9.target=int\ hashCode()
numComments=19
