#BlueJ class context
comment0.target=GraphCalculator
comment0.text=\r\n\ GraphCalculator.java\r\n\ \r\n\ Calculadora\ de\ grafos\ para\ realizar\ operaciones\ b\u00E1sicas\ y\ m\u00E1s\ complejas.\r\n\ Ciclo\ 1\:\ Crear\ una\ calculadora,\ asignar\ un\ grafo\ a\ una\ variable\ y\ consultarlo.\r\n\ \r\n\ @author\ ESCUELA\ 2025-01\r\n
comment1.params=
comment1.target=GraphCalculator()
comment10.params=var1\ var2\ result
comment10.target=void\ intersection(java.lang.String,\ java.lang.String,\ java.lang.String)
comment11.params=var1\ var2\ result
comment11.target=void\ difference(java.lang.String,\ java.lang.String,\ java.lang.String)
comment12.params=var1\ var2\ result
comment12.target=void\ join(java.lang.String,\ java.lang.String,\ java.lang.String)
comment2.params=nombre
comment2.target=void\ create(java.lang.String)
comment2.text=\r\n\ Crea\ una\ nueva\ variable\ en\ la\ calculadora.\r\n\ Si\ la\ variable\ ya\ existe,\ se\ marca\ la\ operaci\u00F3n\ como\ fallida.\r\n\ \r\n\ @param\ nombre\ el\ nombre\ de\ la\ variable\ a\ crear.\r\n
comment3.params=graph\ vertices\ edges
comment3.target=void\ assign(java.lang.String,\ java.lang.String[],\ java.lang.String[][])
comment3.text=\r\n\ Asigna\ un\ nuevo\ grafo\ a\ la\ variable\ indicada.\r\n\ Se\ utiliza\ el\ constructor\ de\ Graph\ que\ recibe\ v\u00E9rtices\ y\ aristas.\r\n\ \r\n\ @param\ graph\ \ \ el\ nombre\ de\ la\ variable\ donde\ asignar\ el\ grafo.\r\n\ @param\ vertices\ un\ arreglo\ de\ v\u00E9rtices.\r\n\ @param\ edges\ \ \ una\ matriz\ con\ las\ aristas\ (pares\ de\ v\u00E9rtices).\r\n
comment4.params=graph
comment4.target=java.lang.String\ toString(java.lang.String)
comment4.text=\r\n\ Retorna\ la\ representaci\u00F3n\ en\ cadena\ del\ grafo\ asociado\ a\ la\ variable.\r\n\ Se\ espera\ que\ Graph.toString()\ retorne\ las\ aristas\ en\ may\u00FAsculas\ y\ en\ orden\ alfab\u00E9tico.\r\n\ \r\n\ @param\ graph\ el\ nombre\ de\ la\ variable.\r\n\ @return\ la\ representaci\u00F3n\ en\ cadena\ del\ grafo,\ o\ una\ cadena\ vac\u00EDa\ si\ no\ existe.\r\n
comment5.params=
comment5.target=boolean\ ok()
comment5.text=\r\n\ Retorna\ true\ si\ la\ \u00FAltima\ operaci\u00F3n\ se\ complet\u00F3\ exitosamente.\r\n\ \r\n\ @return\ true\ si\ la\ \u00FAltima\ operaci\u00F3n\ fue\ exitosa,\ false\ en\ caso\ contrario.\r\n
comment6.params=graphName\ from\ to
comment6.target=void\ addEdge(java.lang.String,\ java.lang.String,\ java.lang.String)
comment6.text=\r\n\ Inserta\ un\ arco\ en\ un\ grafo\ existente.\r\n
comment7.params=graphName\ from\ to
comment7.target=void\ removeEdge(java.lang.String,\ java.lang.String,\ java.lang.String)
comment7.text=\r\n\ Elimina\ un\ arco\ de\ un\ grafo\ existente.\r\n
comment8.params=graphName\ verticesToCheck
comment8.target=boolean\ containsAllVertices(java.lang.String,\ java.lang.String[])
comment8.text=\r\n\ Verifica\ si\ un\ conjunto\ de\ v\u00E9rtices\ pertenece\ a\ un\ grafo.\r\n
comment9.params=graphName\ verticesToPass
comment9.target=java.util.List\ findPathThrough(java.lang.String,\ java.lang.String[])
comment9.text=\r\n\ Retorna\ un\ camino\ que\ pase\ por\ un\ conjunto\ de\ v\u00E9rtices\ en\ un\ grafo.\r\n
numComments=13
